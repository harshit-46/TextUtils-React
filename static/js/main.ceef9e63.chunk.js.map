{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","role","htmlFor","modetext","TextForm","text","setText","useState","email","setEmail","Fragment","style","color","heading","value","rows","onChange","event","target","backgroundColor","handleUpClick","cap","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","extractEmail","arr","split","items","string","strLen","length","slice","Alert","alert","word","lower","charAt","capitalize","msg","App","setMode","modeText","setModeText","setAlert","message","setTimeout","document","body","aboutText","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ceef9e63.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/*<li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>*/}\r\n            </ul>\r\n            {/*<form className=\"d-flex\" role=\"search\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">{props.search}</button>\r\n            </form>*/}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modetext}</label>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    search: PropTypes.string\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let cap = text.toUpperCase();\r\n        setText(cap);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    };\r\n\r\n    const handleLoClick = () => {\r\n        let cap = text.toLowerCase();\r\n        setText(cap);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    };\r\n\r\n    const handleClearClick = () => {\r\n        let cap = '';\r\n        setText(cap);\r\n        setEmail(\"Not Present\");\r\n    };\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const extractEmail = () => {\r\n        let arr = text.split(\" \");\r\n        for(let items of arr) {\r\n            let string = items;\r\n            let strLen = string.length;\r\n            if(string.slice(strLen - 4) === \".com\") {\r\n                let email = string;\r\n                setEmail(email);\r\n            }\r\n        }\r\n    };\r\n\r\n    const [text, setText] = useState('');\r\n    const [email, setEmail] = useState(\"Not Present\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text} rows=\"8\" onChange={handleOnChange} style={{backgroundColor: props.mode === 'light' ? 'white' : '#262323', color: props.mode === 'light' ? 'black' : 'white'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary\" onClick={extractEmail}>Extract Email</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n            <h2>Your Text Summary:</h2>\r\n            <p>{text.length === 0 ? 0 : text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text : 'Enter Something to preview it here!'}</p>\r\n            <p>Email is: {email}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n//import About from './components/About';\n/*\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n*/\n\nfunction App() {\n  const [mode,setMode] = useState('light');\n  const [modeText, setModeText] = useState('Dark mode');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout( () => {\n      setAlert(null)\n    },1500);\n  }\n\n  const togglemode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      setModeText('Light mode');\n      document.body.style.backgroundColor = '#262323';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode('light');\n      setModeText('Dark mode');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    {/*<Router>*/}\n      <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} modetext={modeText} aboutText=\"About\"/>\n      <Alert alert={alert}/>\n      <div className=\"container\">\n        {/*<Routes>\n          <Route exact path=\"/about\" element={<About/>}></Route>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter your Text to analyze\" mode={mode}/>}></Route>\n          </Routes>*/}\n          <TextForm showAlert={showAlert} heading=\"Enter your Text to analyze\" mode={mode}/>\n      </div>\n      {/*</Router>*/}\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}